# https://www.haproxy.com/documentation/hapee/latest/onepage/#home
# HAProxy configuration for testing behind upstream proxy (nginx/Cloudflare)
global
    log stdout format raw local0
    lua-prepend-path /usr/lib/crowdsec-haproxy-spoa-bouncer/lua/?.lua
    lua-load /usr/lib/crowdsec-haproxy-spoa-bouncer/lua/crowdsec.lua
    setenv CROWDSEC_BAN_TEMPLATE_PATH /var/lib/crowdsec/lua/haproxy/templates/ban.html
    setenv CROWDSEC_CAPTCHA_TEMPLATE_PATH /var/lib/crowdsec/lua/haproxy/templates/captcha.html

defaults
    log global
    option httplog
    timeout client 1m
	timeout server 1m
	timeout connect 10s
	timeout http-keep-alive 2m
	timeout queue 15s
	timeout tunnel 4h  # for websocket

frontend test
    mode http
    bind *:9090
    
    unique-id-format %[uuid()]
    unique-id-header X-Unique-ID
    
    # Example: Extract real client IP from proxy headers
    # When behind a reverse proxy (nginx, Cloudflare, etc.), the real client IP
    # is typically in X-Real-IP or X-Forwarded-For headers.
    # IMPORTANT: Use req.hdr_ip() to extract as IP type (not string)
    # This variable can then be used in SPOE configuration (see crowdsec.cfg)
    http-request set-var(txn.client_ip) req.hdr_ip(x-real-ip)
    
    # Debug headers to verify IP extraction
    http-request set-header X-Debug-Real-IP %[var(txn.client_ip)]
    http-request set-header X-Debug-Direct-IP %[src]
    
    filter spoe engine crowdsec config /etc/haproxy/crowdsec.cfg

    ## If you dont want to render any content, you can use the following line
    # tcp-request content reject if !{ var(txn.crowdsec.remediation) -m str "allow" }

    ## Drop ban requests before http handler is called
    # tcp-request content reject if { var(txn.crowdsec.remediation) -m str "ban" }

    ## Set a custom header on the request for upstream services to use
    http-request set-header X-CrowdSec-Remediation %[var(txn.crowdsec.remediation)] if { var(txn.crowdsec.remediation) -m found }
    ## Set a custom header on the request for upstream services to use
    http-request set-header X-CrowdSec-IsoCode %[var(txn.crowdsec.isocode)] if { var(txn.crowdsec.isocode) -m found }

    ## Handle 302 redirect for successful captcha validation (native HAProxy redirect)
    http-request redirect code 302 location %[var(txn.crowdsec.redirect)] if { var(txn.crowdsec.remediation) -m str "allow" } { var(txn.crowdsec.redirect) -m found }
    
    ## Call lua script only for ban and captcha remediations (performance optimization)
    http-request lua.crowdsec_handle if { var(txn.crowdsec.remediation) -m str "captcha" }
    http-request lua.crowdsec_handle if { var(txn.crowdsec.remediation) -m str "ban" }

    ## Handle captcha cookie management via HAProxy (new approach)
    ## Set captcha cookie when SPOA provides captcha_status (pending or valid)
    http-after-response set-header Set-Cookie %[var(txn.crowdsec.captcha_cookie)] if { var(txn.crowdsec.captcha_status) -m found } { var(txn.crowdsec.captcha_cookie) -m found }
    ## Clear captcha cookie when cookie exists but no captcha_status (Allow decision)
    http-after-response set-header Set-Cookie %[var(txn.crowdsec.captcha_cookie)] if { var(txn.crowdsec.captcha_cookie) -m found } !{ var(txn.crowdsec.captcha_status) -m found }

    use_backend test_backend

backend test_backend
    mode http
    server s1 whoami:2020
    
backend crowdsec-spoa
    mode tcp
    balance roundrobin
    server s2 spoa:9000
    server s3 spoa:9001

